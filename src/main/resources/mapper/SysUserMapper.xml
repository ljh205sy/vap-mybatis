<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.codingme.boot.dao.mapper.SysUserMapper">
    <!-- resultMap 可以继承extends -->
    <resultMap id="BaseResultMap" type="net.codingme.boot.domain.SysUser">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="avatar" jdbcType="VARCHAR" property="avatar"/>
        <result column="username" jdbcType="VARCHAR" property="username"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="salt" jdbcType="VARCHAR" property="salt"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="birthday" jdbcType="TIMESTAMP" property="birthday"/>
        <result column="sex" jdbcType="INTEGER" property="sex"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="phone" jdbcType="VARCHAR" property="phone"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="create_time"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="update_time"/>
    </resultMap>

    <!-- 通过ofType的属性 ，方式1 ， 结果集正确，不能做到延迟加载。  -->
    <resultMap id="userRoleResultMap2" type="net.codingme.boot.domain.SysUser" extends="BaseResultMap">
        <collection  property="roles" ofType="net.codingme.boot.domain.SysRole">
            <id column="rid" property="id"/>
            <result column="rname" property="name"/>
        </collection>
    </resultMap>

    <!-- 一个用户有多个角色， 通过用户id进行查询用户和所有角色 ，不能做到延迟加载 -->
    <select id="queryUserAndRolesById" resultMap="userRoleResultMap2" parameterType="Integer">
        <include refid="baseSQL"/>
        and user.id  = #{uid}
    </select>

    <sql id="baseSQL">
        select user.*, role.id rid, role.name rname
        from sys_user user,
             sys_role role,
             sys_user_role user_role
        where user.id = user_role.user_id
          and user_role.role_id = role.id
    </sql>


    <!-- 一个用户有多个角色 , 查询所有用户和拥有的角色信息-->
    <!--  查询语句一样，但是下面现实的结果缺不同  -->
<!--    <select id="queryUserAndRoles" resultMap="userRoleResultMap1">-->
<!--        <include refid="baseSQL"/>-->
<!--    </select>-->


    <!--    collection 是用于建立一对多中集合属性的对应关系
            ofType 用于指定集合元素的数据类型
            select 是用于指定查询账户的唯一标识（账户的 dao 全限定类名加上方法名称）
            column 是用于指定使用哪个字段的值作为条件查询
    -->
    <!-- 通过ofType的属性 ，方式2 ， 结果集错误， 外键连接查询  -->
    <!-- 通过外键关联属性 ，方式2 ， 通过外键，查询了多次， Mybatis之collection标签嵌套查询(select, column)的写法  -->
    <resultMap id="userRoleResultMap1" type="net.codingme.boot.domain.SysUser" extends="BaseResultMap">
        <!--            <collection property="roles" fetchType="lazy"  javaType="ArrayList" select="net.codingme.boot.dao.mapper.SysRoleMapper.queryRoleByRid" column="rid"/>-->
        <collection property="roles" fetchType="lazy"  javaType="java.util.ArrayList"  select="net.codingme.boot.dao.mapper.SysRoleMapper.queryRoleByRid" column="rid"/>
    </resultMap>

    <select id="queryUserAndRoles" resultMap="userRoleResultMap1">
        select user.* , user_role.role_id  rid from sys_user   user
        inner join sys_user_role   user_role
        on user.id = user_role.user_id
    </select>















    <select id="queryByUsername" parameterType="string" resultType="net.codingme.boot.domain.SysUser">
        select *
        from sys_user
        where username = #{username}
    </select>

    <select id="queryUserList" resultType="net.codingme.boot.domain.SysUser">
        select *
        from sys_user
    </select>

<!--    <select id="selectByIds" resultType="net.codingme.boot.domain.SysUser">-->
<!--        select * from sys_user user-->
<!--        <where>-->
<!--            user.id in-->
<!--            <foreach collection="ids" item="item" open="(" separator="," close=")">-->
<!--                #{item}-->
<!--            </foreach>-->
<!--        </where>-->
<!--    </select>-->
</mapper>